
#line 3 "ddl-scan-temp.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer ddl_create_buffer
#define yy_delete_buffer ddl_delete_buffer
#define yy_flex_debug ddl_flex_debug
#define yy_init_buffer ddl_init_buffer
#define yy_flush_buffer ddl_flush_buffer
#define yy_load_buffer_state ddl_load_buffer_state
#define yy_switch_to_buffer ddl_switch_to_buffer
#define yyin ddlin
#define yyleng ddlleng
#define yylex ddllex
#define yylineno ddllineno
#define yyout ddlout
#define yyrestart ddlrestart
#define yytext ddltext
#define yywrap ddlwrap
#define yyalloc ddlalloc
#define yyrealloc ddlrealloc
#define yyfree ddlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ddlrestart(ddlin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int ddlleng;

extern FILE *ddlin, *ddlout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up ddltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up ddltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ddlrestart()), so that the user can continue scanning by
	 * just pointing ddlin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when ddltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int ddlleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow ddlwrap()'s to do buffer switches
 * instead of setting up a fresh ddlin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void ddlrestart (FILE *input_file  );
void ddl_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE ddl_create_buffer (FILE *file,int size  );
void ddl_delete_buffer (YY_BUFFER_STATE b  );
void ddl_flush_buffer (YY_BUFFER_STATE b  );
void ddlpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void ddlpop_buffer_state (void );

static void ddlensure_buffer_stack (void );
static void ddl_load_buffer_state (void );
static void ddl_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER ddl_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE ddl_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE ddl_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE ddl_scan_bytes (yyconst char *bytes,int len  );

void *ddlalloc (yy_size_t  );
void *ddlrealloc (void *,yy_size_t  );
void ddlfree (void *  );

#define yy_new_buffer ddl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ddlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ddl_create_buffer(ddlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ddlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ddl_create_buffer(ddlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ddlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *ddlin = (FILE *) 0, *ddlout = (FILE *) 0;

typedef int yy_state_type;

extern int ddllineno;

int ddllineno = 1;

extern char *ddltext;
#define yytext_ptr ddltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up ddltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	ddlleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[393] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,   85,   81,   80,   83,   13,   83,   83,   83,   16,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   84,   10,
       12,   85,   11,   85,   14,   15,   81,    0,   16,   81,
       17,   17,   16,    0,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   75,   82,   82,   82,   82,   82,
       82,   48,   82,   52,   82,   82,   82,   82,   82,   82,
       82,   82,   65,   82,   82,   82,   82,   82,    0,   11,

        0,   14,   81,   17,    0,   18,   82,    2,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       29,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   41,   43,   82,   82,   82,   82,   49,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       61,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,    6,   82,   82,
       82,   82,   82,   82,   26,   82,   82,   82,   82,   82,
       34,   82,   82,   82,   82,   37,   82,   82,   82,   82,
       82,   82,   82,   82,   50,   82,   82,   82,   82,   73,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   69,   82,   82,   82,    3,   82,   82,   82,
       82,   82,   82,    9,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   71,   82,   82,
       39,   82,   82,   44,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   63,   82,   82,
       82,   82,   82,   82,   82,    1,   82,    8,   82,   77,
       82,   82,   20,   82,   82,   24,   82,   82,   82,   82,
       82,   33,   72,   35,   76,   82,   82,   82,   82,   82,
       82,   47,   82,   82,   82,   82,   82,   57,   82,   82,

       82,   82,   82,   82,   66,   82,   68,   82,   82,   82,
        5,   82,   74,   21,   19,   82,   82,   82,   28,   30,
       82,   82,   36,   82,   82,   42,   82,   82,   51,   53,
       82,   55,   82,   82,   82,   82,   82,   64,   82,   82,
       82,   70,   82,   82,   82,   82,   27,   82,   32,   82,
       82,   45,   46,   82,   82,   58,   82,   62,   82,   78,
       67,   82,   82,    7,   82,   82,   82,   38,   40,   54,
       82,   82,   82,   79,   82,   22,   82,   31,   56,   82,
       82,   82,   23,   82,   82,   60,   82,   25,   59,   82,
        4,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    6,    1,    7,    8,
        9,    6,   10,    6,   11,   12,    6,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    6,    6,    6,
        6,    6,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   23,
        6,    1,    6,    6,   39,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   23,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   23,    1,    1,    1,    1,    1,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    2,    3,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[400] =
    {   0,
        0,    0,   57,   59,  346,  316,  226,  189,  183,  168,
      165,  814,   67,   70,  814,  814,   63,   66,  146,   68,
       66,   62,  113,   71,   61,   69,    0,  111,   74,  117,
      108,   68,   91,   88,  134,  160,  149,   94,  814,  814,
      814,  147,  814,  148,  814,  814,  147,  140,  171,    0,
      167,  174,  181,  195,    0,  110,  178,  144,  164,  180,
      178,  197,  203,  195,  187,  187,  216,  187,  196,  205,
      209,  206,  206,  214,    0,  217,  231,  207,  224,  224,
      232,  233,  247,    0,  237,  252,  277,  249,  264,  252,
      264,  258,    0,  252,  271,  271,  271,  264,  137,  814,

      133,  814,    0,  301,  105,  102,  278,    0,  295,  274,
      295,  306,  305,  308,  292,  305,  301,  320,  306,  320,
      317,  327,  324,  328,  318,  326,  318,  339,  336,  331,
      342,  346,  334,  353,    0,  358,   68,   65,  355,    0,
      354,  365,  352,  370,  362,  364,  372,  378,  361,  363,
        0,  371,  364,  374,  362,  375,  373,  384,  393,  378,
      415,  384,  385,   62,  391,  410,  407,  418,  412,  411,
      421,  408,  410,  427,  414,  422,  415,  421,  420,  430,
        0,  429,  427,  428,  442,    0,  448,  431,  448,  451,
      456,  449,  452,  465,    0,  457,  463,  467,  476,    0,

      462,  469,  465,  477,  476,  484,  485,  483,  491,  476,
      488,  480,    0,  493,  497,  493,    0,  501,  492,  511,
      513,  517,  519,    0,  513,  514,  512,  520,  517,  525,
      534,  527,  522,  531,  536,  538,  527,    0,  537,  539,
        0,  548,  545,    0,  540,  543,  534,  551,  563,  548,
      551,  568,  569,  569,  565,  573,  573,    0,  574,  582,
      584,  578,  585,  580,  595,    0,  584,    0,  594,    0,
      582,  583,  585,  587,  607,    0,  591,  600,  603,  599,
      620,    0,    0,    0,    0,  613,  621,  619,  614,  611,
      613,    0,  635,  628,  633,  619,  632,    0,  644,  636,

      637,   57,  634,  635,    0,  651,    0,  658,  643,  660,
        0,  659,    0,    0,    0,  658,   54,  663,    0,    0,
      669,  669,    0,  655,  666,    0,  660,  663,    0,    0,
      669,    0,  682,  668,   51,  669,  671,    0,  688,  692,
      681,    0,  684,  685,  692,  686,    0,  697,    0,  692,
      686,    0,    0,  699,  711,    0,  698,    0,  702,    0,
        0,  697,  712,    0,  706,  708,  725,    0,    0,    0,
      715,  717,  726,    0,  725,  721,  736,    0,    0,  737,
      728,  744,    0,  733,  736,    0,  741,    0,    0,  736,
        0,  814,  795,  798,  801,   84,  804,  807,  810

    } ;

static yyconst flex_int16_t yy_def[400] =
    {   0,
      392,    1,  393,  393,  394,  394,  395,  395,  393,  393,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  392,  392,
      392,  397,  392,  398,  392,  392,  392,  392,  392,  399,
      392,  392,  392,  392,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  392,

      398,  392,  399,  392,  392,  392,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,    0,  392,  392,  392,  392,  392,  392,  392

    } ;

static yyconst flex_int16_t yy_nxt[879] =
    {   0,
       12,   13,   14,   13,   12,   15,   16,   15,   15,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       27,   28,   27,   29,   27,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   27,   27,   27,   27,   39,
       21,   22,   23,   24,   25,   26,   27,   27,   28,   29,
       27,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   27,   27,   27,   40,   41,   40,   41,   47,   47,
       47,   47,   47,   47,   48,   49,   50,   48,   49,   52,
       53,   56,   57,   60,   66,   54,   55,   70,   67,  357,
       58,   78,  346,   72,   84,  337,   73,   71,   68,   59,

      218,   69,   74,  193,   85,   87,  192,   98,   56,   57,
       60,   66,   54,   70,  106,   67,   58,  106,   78,   72,
       84,   86,   73,   71,   68,   59,   61,   69,   74,   75,
       79,   85,   87,   62,   98,   82,   76,   77,   80,  102,
       63,   83,  107,   64,   81,  100,   65,   86,   47,   47,
       47,   88,   51,   61,  102,  100,   75,   79,   51,   89,
       62,   82,   76,   77,  392,   80,   63,   83,  107,   64,
       81,   90,   65,   91,   46,   95,  109,   96,   88,   51,
       97,   92,   48,   49,   54,   89,  104,   93,   54,   46,
       94,   54,   52,   53,  108,   45,  110,   90,   54,  111,

       91,   95,  109,   96,  105,  105,   97,  106,   92,  112,
      113,   54,  118,   93,  114,   54,   94,  119,   54,  120,
      124,  108,  110,  125,  126,   54,  111,  115,  116,  117,
      127,  121,   45,  128,  122,  112,  129,  113,  130,  118,
      123,  114,  131,  119,  135,  120,  124,  132,  139,  125,
      138,  126,  133,  115,  116,  117,  136,  127,  121,  128,
      137,  122,  129,  134,  130,  140,  123,  143,  131,  144,
      135,  141,  142,  145,  132,  139,  138,  152,  154,  133,
      150,  151,  136,  153,  155,  156,  137,  159,  160,  134,
      146,  140,  157,  143,  161,  147,  144,  141,  142,  162,

      145,  164,  158,  148,  152,  154,  150,  151,  149,  153,
      155,  156,  163,  104,  159,  160,  165,  146,   54,  157,
      161,  166,  147,  169,   43,  170,  162,  164,  158,  148,
      171,  167,  172,  173,  149,  168,  174,  175,  176,  163,
      177,  179,  180,  165,  178,   54,  181,  182,  166,  183,
      169,  170,  184,  185,   43,  186,  171,  167,  172,  187,
      173,  168,  174,  188,  175,  176,  189,  177,  179,  180,
      190,  178,  181,  191,  182,  183,  194,  392,  195,  184,
      185,  186,  196,  392,  197,  198,  187,  199,  200,  201,
      188,  202,  189,  203,  204,  205,  206,  190,  207,  208,

      191,  209,  210,  194,  195,  211,  212,  392,  213,  196,
      197,  216,  198,  199,  200,  217,  201,  219,  202,  203,
      204,  205,  206,  220,  207,  208,  221,  209,  210,  214,
      215,  222,  211,  212,  213,  224,  225,  216,  226,  392,
      227,  217,  228,  219,  229,  392,  230,  231,  232,  223,
      220,  233,  234,  221,  235,  236,  214,  215,  222,  237,
      238,  224,  225,  239,  240,  226,  227,  241,  228,  242,
      243,  229,  230,  231,  232,  223,  244,  233,  234,  245,
      235,  236,  246,  247,  249,  237,  238,  248,  250,  251,
      239,  240,  252,  241,  253,  254,  242,  243,  255,  392,

      256,  257,  258,  244,  259,  245,  260,  262,  246,  261,
      247,  249,  263,  248,  264,  250,  251,  265,  252,  266,
      253,  254,  267,  392,  268,  255,  256,  269,  257,  258,
      270,  259,  271,  260,  262,  261,  272,  276,  263,  273,
      274,  264,  275,  277,  265,  266,  278,  279,  282,  267,
      268,  280,  281,  283,  269,  284,  286,  270,  285,  271,
      287,  288,  289,  272,  276,  273,  274,  290,  275,  277,
      291,  292,  293,  278,  279,  282,  294,  280,  281,  295,
      283,  296,  284,  286,  285,  297,  298,  287,  288,  289,
      299,  392,  300,  290,  301,  304,  291,  292,  302,  293,

      303,  305,  307,  294,  306,  295,  308,  296,  309,  392,
      310,  311,  297,  298,  312,  313,  314,  299,  300,  315,
      316,  301,  304,  317,  302,  318,  303,  319,  305,  307,
      306,  320,  308,  321,  324,  309,  310,  322,  311,  323,
      312,  313,  314,  325,  326,  315,  327,  316,  328,  317,
      329,  318,  330,  319,  331,  392,  332,  320,  333,  334,
      321,  324,  335,  336,  322,  323,  338,  339,  340,  325,
      326,  341,  327,  342,  328,  343,  344,  329,  330,  345,
      347,  331,  332,  348,  333,  349,  334,  350,  335,  336,
      351,  352,  338,  339,  353,  340,  354,  355,  341,  342,

      356,  358,  343,  344,  359,  360,  345,  347,  361,  368,
      348,  362,  349,  350,  363,  364,  351,  352,  365,  366,
      353,  367,  354,  369,  355,  370,  356,  358,  371,  375,
      359,  372,  360,  373,  374,  361,  368,  362,  376,  377,
      363,  364,  378,  381,  365,  366,  379,  367,  380,  369,
      382,  370,  383,  384,  385,  371,  375,  372,  386,  373,
      374,  387,  392,  388,  376,  377,  389,  390,  391,  378,
      381,  392,  379,  392,  380,  392,  382,  392,  383,  392,
      384,  385,  392,  392,  386,  392,  392,  392,  387,  388,
      392,  392,  389,  390,  391,   12,   12,   12,   42,   42,

       42,   44,   44,   44,   99,   99,   99,  101,  101,  101,
      103,  392,  103,   11,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yyconst flex_int16_t yy_chk[879] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,   13,   13,
       13,   14,   14,   14,   17,   17,   18,   18,   18,   20,
       20,   21,   21,   22,   24,   20,  396,   25,   24,  335,
       21,   29,  317,   26,   32,  302,   26,   25,   24,   21,

      164,   24,   26,  138,   33,   34,  137,   38,   21,   21,
       22,   24,   20,   25,  106,   24,   21,  105,   29,   26,
       32,   33,   26,   25,   24,   21,   23,   24,   26,   28,
       30,   33,   34,   23,   38,   31,   28,   28,   30,  101,
       23,   31,   56,   23,   30,   99,   23,   33,   47,   47,
       47,   35,   48,   23,   44,   42,   28,   30,   19,   35,
       23,   31,   28,   28,   11,   30,   23,   31,   56,   23,
       30,   35,   23,   36,   10,   37,   58,   37,   35,   51,
       37,   36,   49,   49,   51,   35,   52,   36,   49,    9,
       36,   52,   53,   53,   57,    8,   59,   35,   53,   60,

       36,   37,   58,   37,   54,   54,   37,   54,   36,   61,
       62,   51,   64,   36,   62,   49,   36,   65,   52,   66,
       68,   57,   59,   69,   70,   53,   60,   63,   63,   63,
       71,   67,    7,   72,   67,   61,   73,   62,   74,   64,
       67,   62,   76,   65,   78,   66,   68,   77,   81,   69,
       80,   70,   77,   63,   63,   63,   79,   71,   67,   72,
       79,   67,   73,   77,   74,   82,   67,   85,   76,   86,
       78,   83,   83,   86,   77,   81,   80,   89,   91,   77,
       88,   88,   79,   90,   92,   94,   79,   96,   97,   77,
       87,   82,   95,   85,   98,   87,   86,   83,   83,  107,

       86,  110,   95,   87,   89,   91,   88,   88,   87,   90,
       92,   94,  109,  104,   96,   97,  111,   87,  104,   95,
       98,  112,   87,  114,    6,  115,  107,  110,   95,   87,
      116,  113,  117,  118,   87,  113,  119,  120,  121,  109,
      122,  123,  124,  111,  122,  104,  125,  126,  112,  127,
      114,  115,  128,  129,    5,  130,  116,  113,  117,  131,
      118,  113,  119,  132,  120,  121,  133,  122,  123,  124,
      134,  122,  125,  136,  126,  127,  139,    0,  141,  128,
      129,  130,  142,    0,  143,  144,  131,  145,  146,  147,
      132,  148,  133,  149,  150,  152,  153,  134,  154,  155,

      136,  156,  157,  139,  141,  158,  159,    0,  160,  142,
      143,  162,  144,  145,  146,  163,  147,  165,  148,  149,
      150,  152,  153,  166,  154,  155,  167,  156,  157,  161,
      161,  168,  158,  159,  160,  169,  170,  162,  171,    0,
      172,  163,  173,  165,  174,    0,  175,  176,  177,  168,
      166,  178,  179,  167,  180,  182,  161,  161,  168,  183,
      184,  169,  170,  185,  187,  171,  172,  188,  173,  189,
      190,  174,  175,  176,  177,  168,  191,  178,  179,  192,
      180,  182,  193,  194,  197,  183,  184,  196,  198,  199,
      185,  187,  201,  188,  202,  203,  189,  190,  204,    0,

      205,  206,  207,  191,  208,  192,  209,  211,  193,  210,
      194,  197,  212,  196,  214,  198,  199,  215,  201,  216,
      202,  203,  218,    0,  219,  204,  205,  220,  206,  207,
      221,  208,  222,  209,  211,  210,  223,  228,  212,  225,
      226,  214,  227,  229,  215,  216,  230,  231,  234,  218,
      219,  232,  233,  235,  220,  236,  239,  221,  237,  222,
      240,  242,  243,  223,  228,  225,  226,  245,  227,  229,
      246,  247,  248,  230,  231,  234,  249,  232,  233,  250,
      235,  251,  236,  239,  237,  252,  253,  240,  242,  243,
      254,    0,  255,  245,  256,  260,  246,  247,  257,  248,

      259,  261,  263,  249,  262,  250,  264,  251,  265,    0,
      267,  269,  252,  253,  271,  272,  273,  254,  255,  274,
      275,  256,  260,  277,  257,  278,  259,  279,  261,  263,
      262,  280,  264,  281,  287,  265,  267,  281,  269,  286,
      271,  272,  273,  288,  289,  274,  290,  275,  291,  277,
      293,  278,  294,  279,  295,    0,  296,  280,  297,  299,
      281,  287,  300,  301,  281,  286,  303,  304,  306,  288,
      289,  308,  290,  309,  291,  310,  312,  293,  294,  316,
      318,  295,  296,  321,  297,  322,  299,  324,  300,  301,
      325,  327,  303,  304,  328,  306,  331,  333,  308,  309,

      334,  336,  310,  312,  337,  339,  316,  318,  340,  350,
      321,  341,  322,  324,  343,  344,  325,  327,  345,  346,
      328,  348,  331,  351,  333,  354,  334,  336,  355,  363,
      337,  357,  339,  359,  362,  340,  350,  341,  365,  366,
      343,  344,  367,  373,  345,  346,  371,  348,  372,  351,
      375,  354,  376,  377,  380,  355,  363,  357,  381,  359,
      362,  382,    0,  384,  365,  366,  385,  387,  390,  367,
      373,    0,  371,    0,  372,    0,  375,    0,  376,    0,
      377,  380,    0,    0,  381,    0,    0,    0,  382,  384,
        0,    0,  385,  387,  390,  393,  393,  393,  394,  394,

      394,  395,  395,  395,  397,  397,  397,  398,  398,  398,
      399,    0,  399,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int ddl_flex_debug;
int ddl_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *ddltext;
/* Copyright (C) 2014 InfiniDB, Inc.

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; version 2 of
   the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA. */
/* $Id: ddl.l 9341 2013-03-27 14:10:35Z chao $ */
#include <iostream>
#include <vector>
#include <stdio.h>
#include "ddlpkg.h"

#ifdef _MSC_VER
#include "ddl-gram-win.h"
#else
#include "ddl-gram.h"
#endif

int lineno = 1;
void ddlerror(char *s);

/* Handles to the buffer that the lexer uses internally */
static YY_BUFFER_STATE scanbufhandle;
static char *scanbuf;

static char* scanner_copy (char *str);

/* %option header-file="ddl-scan.h" */

#define INITIAL 0
#define check1 1
#define check2 2
#define inquote 3
#define endquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ddllex_destroy (void );

int ddlget_debug (void );

void ddlset_debug (int debug_flag  );

YY_EXTRA_TYPE ddlget_extra (void );

void ddlset_extra (YY_EXTRA_TYPE user_defined  );

FILE *ddlget_in (void );

void ddlset_in  (FILE * in_str  );

FILE *ddlget_out (void );

void ddlset_out  (FILE * out_str  );

int ddlget_leng (void );

char *ddlget_text (void );

int ddlget_lineno (void );

void ddlset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ddlwrap (void );
#else
extern int ddlwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( ddltext, ddlleng, 1, ddlout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( ddlin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( ddlin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, ddlin))==0 && ferror(ddlin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(ddlin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ddllex (void);

#define YY_DECL int ddllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after ddltext and ddlleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! ddlin )
			ddlin = stdin;

		if ( ! ddlout )
			ddlout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ddlensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				ddl_create_buffer(ddlin,YY_BUF_SIZE );
		}

		ddl_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of ddltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 814 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{return ACTION;}
	YY_BREAK
case 2:
YY_RULE_SETUP
{return ADD;}
	YY_BREAK
case 3:
YY_RULE_SETUP
{return ALTER;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{return AUTO_INCREMENT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{return CASCADE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{return IDB_CHAR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{return IDB_CHAR;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{return BIGINT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
{BEGIN(check1);return CHECK;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{BEGIN(check2); return '(';}
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up ddltext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up ddltext again */
YY_RULE_SETUP
{BEGIN(check1); ddllval.str = scanner_copy(ddltext); return CP_SEARCH_CONDITION_TEXT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{BEGIN(0); return ')';}
	YY_BREAK
case 13:
YY_RULE_SETUP
{BEGIN(inquote);return ddltext[0];}
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up ddltext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up ddltext again */
YY_RULE_SETUP
{BEGIN(endquote); ddllval.str = scanner_copy(ddltext); return SCONST;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{BEGIN(0); return ddltext[0];}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ddllval.str = scanner_copy(ddltext); return ICONST;}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ddllval.str = scanner_copy(ddltext); return FCONST;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ddllval.str = scanner_copy(ddltext); return FCONST;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{return COMMENT;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{return COLUMN;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{return COLUMNS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{return CONSTRAINT;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{return CONSTRAINTS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{return CREATE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{return CURRENT_USER;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ddllval.str=strdup("date"); return DATE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{return DATETIME;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{return DECIMAL;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{return DECIMAL;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{return DEFAULT;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{return DEFERRABLE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{return DEFERRED;}
	YY_BREAK
case 33:
YY_RULE_SETUP
{return IDB_DELETE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
{return DROP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
{return ENGINE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{return FOREIGN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{return FULL;}
	YY_BREAK
case 38:
YY_RULE_SETUP
{return IMMEDIATE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
{return INDEX;}
	YY_BREAK
case 40:
YY_RULE_SETUP
{return INITIALLY;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{return IDB_INT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{return INTEGER;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{return KEY;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{return MATCH;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{return MAX_ROWS;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{return MIN_ROWS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{return MODIFY;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{return NO;}
	YY_BREAK
case 49:
YY_RULE_SETUP
{return NOT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
{return NULL_TOK;}
	YY_BREAK
case 51:
YY_RULE_SETUP
{return NUMERIC;}
	YY_BREAK
case 52:
YY_RULE_SETUP
{return ON;}
	YY_BREAK
case 53:
YY_RULE_SETUP
{return PARTIAL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
{return PRECISION;}
	YY_BREAK
case 55:
YY_RULE_SETUP
{return PRIMARY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
{return REFERENCES;}
	YY_BREAK
case 57:
YY_RULE_SETUP
{return RENAME;}
	YY_BREAK
case 58:
YY_RULE_SETUP
{return RESTRICT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
{return SESSION_USER;}
	YY_BREAK
case 60:
YY_RULE_SETUP
{return SYSTEM_USER;}
	YY_BREAK
case 61:
YY_RULE_SETUP
{return SET;}
	YY_BREAK
case 62:
YY_RULE_SETUP
{return SMALLINT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
{return TABLE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
{return TINYINT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
{return TO;}
	YY_BREAK
case 66:
YY_RULE_SETUP
{return UNIQUE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
{return UNSIGNED;}
	YY_BREAK
case 68:
YY_RULE_SETUP
{return UPDATE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
{return USER;}
	YY_BREAK
case 70:
YY_RULE_SETUP
{return VARCHAR;}
	YY_BREAK
case 71:
YY_RULE_SETUP
{return IDB_FLOAT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
{return DOUBLE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
{return REAL;}
	YY_BREAK
case 74:
YY_RULE_SETUP
{return CHARSET;}
	YY_BREAK
case 75:
YY_RULE_SETUP
{return IDB_IF;}
	YY_BREAK
case 76:
YY_RULE_SETUP
{return EXISTS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
{return CHANGE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
{return TRUNCATE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
{return VARBINARY;}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{ lineno++;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
    /* ignore */
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ddllval.str = scanner_copy(ddltext); return IDENT;}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    return ddltext[0];
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    /* ignore */
}
	YY_BREAK
case 85:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(check1):
case YY_STATE_EOF(check2):
case YY_STATE_EOF(inquote):
case YY_STATE_EOF(endquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed ddlin at a new source and called
			 * ddllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = ddlin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( ddlwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * ddltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ddllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ddlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ddlrestart(ddlin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ddlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 392);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ddlrestart(ddlin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ddlwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve ddltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ddlrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        ddlensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            ddl_create_buffer(ddlin,YY_BUF_SIZE );
	}

	ddl_init_buffer(YY_CURRENT_BUFFER,input_file );
	ddl_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void ddl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ddlpop_buffer_state();
	 *		ddlpush_buffer_state(new_buffer);
     */
	ddlensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ddl_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (ddlwrap()) processing, but the only time this flag
	 * is looked at is after ddlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void ddl_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	ddlin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ddl_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ddlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ddlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ddl_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ddl_create_buffer()
 * 
 */
    void ddl_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ddlfree((void *) b->yy_ch_buf  );

	ddlfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ddlrestart() or at EOF.
 */
    static void ddl_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	ddl_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ddl_init_buffer was _probably_
     * called from ddlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void ddl_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ddl_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void ddlpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	ddlensure_buffer_stack();

	/* This block is copied from ddl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ddl_switch_to_buffer. */
	ddl_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void ddlpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	ddl_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		ddl_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ddlensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)ddlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in ddlensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ddlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in ddlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ddl_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ddlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ddl_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ddllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ddl_scan_bytes() instead.
 */
YY_BUFFER_STATE ddl_scan_string (yyconst char * yystr )
{
    
	return ddl_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to ddllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ddl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ddlalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ddl_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ddl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up ddltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		ddltext[ddlleng] = (yy_hold_char); \
		(yy_c_buf_p) = ddltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		ddlleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int ddlget_lineno  (void)
{
        
    return ddllineno;
}

/** Get the input stream.
 * 
 */
FILE *ddlget_in  (void)
{
        return ddlin;
}

/** Get the output stream.
 * 
 */
FILE *ddlget_out  (void)
{
        return ddlout;
}

/** Get the length of the current token.
 * 
 */
int ddlget_leng  (void)
{
        return ddlleng;
}

/** Get the current token.
 * 
 */

char *ddlget_text  (void)
{
        return ddltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void ddlset_lineno (int  line_number )
{
    
    ddllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see ddl_switch_to_buffer
 */
void ddlset_in (FILE *  in_str )
{
        ddlin = in_str ;
}

void ddlset_out (FILE *  out_str )
{
        ddlout = out_str ;
}

int ddlget_debug  (void)
{
        return ddl_flex_debug;
}

void ddlset_debug (int  bdebug )
{
        ddl_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ddllex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    ddlin = stdin;
    ddlout = stdout;
#else
    ddlin = (FILE *) 0;
    ddlout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ddllex_init()
     */
    return 0;
}

/* ddllex_destroy is for both reentrant and non-reentrant scanners. */
int ddllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ddl_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ddlpop_buffer_state();
	}

	/* Destroy the stack itself. */
	ddlfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ddllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ddlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *ddlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ddlfree (void * ptr )
{
	free( (char *) ptr );	/* see ddlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void ddlerror(char const *s)
{
	printf("yyerror: %d: %s at %s\n", lineno, s, ddltext);
}

typedef std::vector<char*> valbuf_t;

static valbuf_t valbuf;

/*
 * Called before any actual parsing is done
 */
void scanner_init(const char *str)
{
	size_t slen = strlen(str);

	/*
	 * Might be left over after ereport()
	 */
	if (YY_CURRENT_BUFFER)
		ddl_delete_buffer(YY_CURRENT_BUFFER);

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
	scanbuf =  (char *)malloc(slen + 2);
	memcpy(scanbuf, str, slen);
	scanbuf[slen] = scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	scanbufhandle = ddl_scan_buffer(scanbuf,slen + 2);

	BEGIN(INITIAL);

        valbuf.clear();
}

/*
 * Called after parsing is done to clean up after scanner_init()
 */

void scanner_finish(void)
{
  char* str;

   ddl_delete_buffer(scanbufhandle);
   free(scanbuf);
   unsigned int i;
   for(i=0; i<valbuf.size(); i++) {
     str = valbuf[i];
     if(str) {
//        std::cout << "valbuf:(" << str << ")" << std::endl;
        free(valbuf[i]);
     }
   }
   valbuf.clear();
}

char* scanner_copy (char *str)
{
  char* nv = strdup(str);
  if(nv)
    valbuf.push_back(nv);
  return nv;
}

