
#line 3 "dml-scan-temp.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer dml_create_buffer
#define yy_delete_buffer dml_delete_buffer
#define yy_flex_debug dml_flex_debug
#define yy_init_buffer dml_init_buffer
#define yy_flush_buffer dml_flush_buffer
#define yy_load_buffer_state dml_load_buffer_state
#define yy_switch_to_buffer dml_switch_to_buffer
#define yyin dmlin
#define yyleng dmlleng
#define yylex dmllex
#define yylineno dmllineno
#define yyout dmlout
#define yyrestart dmlrestart
#define yytext dmltext
#define yywrap dmlwrap
#define yyalloc dmlalloc
#define yyrealloc dmlrealloc
#define yyfree dmlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE dmlrestart(dmlin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int dmlleng;

extern FILE *dmlin, *dmlout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up dmltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up dmltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via dmlrestart()), so that the user can continue scanning by
	 * just pointing dmlin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when dmltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int dmlleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow dmlwrap()'s to do buffer switches
 * instead of setting up a fresh dmlin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void dmlrestart (FILE *input_file  );
void dml_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE dml_create_buffer (FILE *file,int size  );
void dml_delete_buffer (YY_BUFFER_STATE b  );
void dml_flush_buffer (YY_BUFFER_STATE b  );
void dmlpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void dmlpop_buffer_state (void );

static void dmlensure_buffer_stack (void );
static void dml_load_buffer_state (void );
static void dml_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER dml_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE dml_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE dml_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE dml_scan_bytes (yyconst char *bytes,int len  );

void *dmlalloc (yy_size_t  );
void *dmlrealloc (void *,yy_size_t  );
void dmlfree (void *  );

#define yy_new_buffer dml_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        dmlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            dml_create_buffer(dmlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        dmlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            dml_create_buffer(dmlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define dmlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *dmlin = (FILE *) 0, *dmlout = (FILE *) 0;

typedef int yy_state_type;

extern int dmllineno;

int dmllineno = 1;

extern char *dmltext;
#define yytext_ptr dmltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up dmltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	dmlleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[394] =
    {   0,
        0,    0,    0,    0,    0,    0,  104,  103,  101,  100,
       97,   90,   90,   90,   90,   93,  103,   86,   84,   87,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,  103,   98,   99,  101,   95,   93,  102,   95,
       94,   93,    0,   92,   88,   85,   89,   91,   91,   91,
        9,   91,   91,   91,   13,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   41,   46,   91,   91,   91,   91,   91,   91,
       91,   53,   54,   91,   57,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   73,   91,   91,   91,   91,
       91,   91,   91,   91,    0,   98,  102,   94,    0,   96,
       92,    1,    2,    8,   10,   91,    3,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   33,   91,   91,    0,
       91,   91,   91,   91,   91,   91,   44,   47,   91,   91,
        5,    4,   50,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   68,   91,   91,   91,
        6,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   14,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   26,   91,   91,   91,   91,
       91,   91,   91,   91,   36,    0,   37,   91,   91,   91,
       91,   91,   91,   45,   91,   49,   51,   91,   55,   91,
       91,   91,   91,   91,   91,   91,   64,   91,   91,   91,
       91,   70,   91,   91,   91,   91,   91,   77,   91,   79,
       91,   91,   82,   83,   91,   91,   91,   15,   16,   91,
       91,    7,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   31,   32,   91,   35,   37,   38,   39,
       91,   91,   91,   91,   91,   91,   91,   58,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   72,   74,

       91,   91,   91,   91,   81,   91,   91,   91,   17,   91,
       19,   91,   21,   91,   91,   91,   25,   91,   28,   29,
       30,   91,   40,   91,   43,   91,   91,   91,   56,   91,
       91,   91,   91,   63,   91,   91,   67,   91,   91,   75,
       76,   78,   91,   91,   12,   91,   91,   20,   22,   23,
       24,   91,   34,   91,   44,   91,   52,   91,   60,   91,
       91,   91,   91,   91,   71,   91,   91,   91,   18,   27,
       91,   48,   91,   91,   91,   91,   66,   69,   80,   91,
       14,   42,   59,   91,   62,   91,   91,   61,   65,   91,
       91,   11,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    5,    6,
        6,    6,    7,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,    6,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   24,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[401] =
    {   0,
        0,    0,  235,  194,  160,  157,  156,  807,   65,  807,
      807,  807,   61,   64,  145,   66,    0,   64,  807,  138,
       87,   49,  128,   61,   60,  106,   50,   68,  112,    0,
       72,   79,   86,   98,  162,  112,  149,  202,   88,  146,
      173,  162,  132,  807,  807,   85,  124,  188,    0,  162,
      200,  216,   89,    0,  807,  807,  807,    0,   74,  185,
       87,  133,  121,  141,    0,  223,  158,  217,  195,  174,
      241,  194,  193,  205,  216,  213,  222,  240,  227,  234,
      261,  224,  246,    0,  242,  255,  259,  249,  261,  258,
      269,    0,    0,  278,  281,  285,  286,  305,  285,  293,

      302,  296,  302,  303,  316,    0,  310,  316,  317,  313,
      322,  323,  312,  316,  101,  807,    0,  345,   82,   76,
        0,    0,    0,    0,    0,  321,    0,  313,  319,  340,
      329,  339,  333,  343,  343,  346,  357,  358,  356,  364,
      352,  371,  374,  361,  373,  380,  377,  370,  372,  399,
      374,  378,  375,  388,  390,  396,  399,    0,  398,  402,
        0,    0,    0,  400,  411,  399,  408,  415,  418,  414,
      420,  413,  417,  425,  421,  432,    0,  423,  436,  439,
        0,  434,  437,  448,  438,  437,  437,  449,  457,  459,
      456,  468,  473,  466,  470,  470,  472,  463,  465,  482,

      475,  478,  487,  473,  475,    0,  489,  492,  489,  487,
      491,  490,  503,  509,    0,  503,    0,  499,  506,  509,
      521,  509,  521,    0,  511,    0,    0,  516,    0,  520,
      519,  520,  537,  532,  537,  534,    0,  528,  545,  547,
      540,    0,  539,  552,  545,  541,  544,    0,  561,    0,
      562,  566,    0,    0,  555,  570,  573,    0,    0,  559,
      567,    0,  577,  572,  569,  582,  571,  579,  587,  581,
      591,  592,  581,    0,    0,  594,    0,  807,    0,    0,
      597,  605,  588,  606,  613,  607,  604,    0,  601,  604,
      613,  623,  626,  625,  631,  615,  627,  633,    0,    0,

      634,  635,  623,  623,    0,  638,  635,  630,    0,  631,
        0,  633,    0,  643,  653,  640,    0,  659,    0,    0,
        0,  651,    0,  649,    0,  652,  665,  670,    0,  668,
      655,  677,  663,    0,  673,  685,    0,  676,  687,    0,
        0,    0,  688,  671,    0,  689,  693,    0,    0,    0,
        0,  681,    0,  687,    0,  698,    0,  690,    0,  700,
      693,  705,  701,  694,    0,  699,  717,  704,    0,    0,
      706,    0,  712,  724,  727,  728,    0,    0,    0,  716,
        0,    0,    0,  720,    0,  722,  733,    0,    0,  729,
      732,    0,  807,  786,  790,   77,  792,  796,  800,  802

    } ;

static yyconst flex_int16_t yy_def[401] =
    {   0,
      393,    1,  394,  394,  395,  395,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  396,  393,  393,  393,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  398,  393,  393,  393,  393,  393,  399,  393,
      393,  393,  393,  400,  393,  393,  393,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  398,  393,  399,  393,  393,  393,
      400,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  393,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  393,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  393,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,    0,  393,  393,  393,  393,  393,  393,  393

    } ;

static yyconst flex_int16_t yy_nxt[874] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       30,   37,   38,   39,   40,   41,   42,   30,   30,   30,
        8,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       31,   32,   33,   34,   35,   36,   30,   37,   38,   39,
       40,   41,   42,   30,   30,   30,   46,   64,   46,   47,
       48,   49,   47,   48,   51,   52,   55,   56,   80,   71,
       54,   81,   82,   72,   53,  120,   46,   65,   46,   73,
       85,  120,   74,   86,   64,  119,  119,   75,  120,  122,

       88,   87,  105,  125,   80,  116,   71,   81,   89,   82,
       72,   53,   59,   65,   60,   73,  106,   85,   74,   61,
       86,   62,   63,   75,   76,  122,   90,   88,   87,  105,
      125,   77,   91,   50,   78,   89,  116,   79,   59,   83,
       60,  127,  106,   96,   84,   61,   97,   62,   63,   66,
       57,   76,   90,   67,   50,  393,   68,   77,   91,   69,
       78,   45,   70,   79,   45,   83,  126,   98,  127,   96,
       84,   50,   97,  107,  128,  108,   66,   99,  109,   67,
       53,   92,   68,  112,  113,   69,  131,  110,   70,   93,
      114,   94,  126,   95,   98,  111,   51,   52,   44,  107,

      128,  108,  123,   99,  109,  136,   53,   53,   92,  118,
      112,  113,  131,  135,  110,   93,  114,   94,   53,   95,
      100,  143,  111,  124,   51,   52,  141,  142,  101,  123,
      102,  136,  103,   53,   53,  150,  104,  129,  144,   44,
      135,  130,  393,  132,  133,   53,  145,  100,  143,  124,
      146,  134,  141,  142,  101,  149,  102,  137,  103,  154,
      138,   53,  104,  155,  129,  144,  139,  151,  130,  132,
      133,  147,  145,  140,  148,  152,  146,  134,  156,  157,
      158,  149,  159,  160,  137,  154,  161,  138,  162,  153,
      155,  163,  139,  151,  164,  165,  166,  147,  168,  140,

      148,  172,  152,  169,  156,  157,  158,  170,  159,  160,
      175,  167,  161,  171,  162,  153,  178,  163,  176,  173,
      164,  165,  179,  166,  174,  168,  177,  180,  172,  181,
      169,  182,  183,  184,  170,  185,  175,  167,  186,  171,
      187,  188,  191,  178,  176,  189,  173,  190,  179,  192,
      193,  174,  177,  180,  118,  181,  194,  199,  182,  183,
      184,  195,  185,   53,  186,  196,  197,  187,  188,  191,
      198,  189,  204,  190,  205,  192,  193,  200,  201,  202,
      206,  393,  203,  194,  199,  207,  208,  195,  209,  211,
       53,  196,  197,  210,  212,  213,  198,  214,  215,  204,

      150,  205,  217,  200,  201,  218,  202,  206,  203,  219,
      220,  207,  221,  208,  222,  209,  211,  223,  225,  210,
      226,  212,  213,  214,  215,  227,  229,  224,  217,  228,
      230,  218,  216,  231,  232,  219,  235,  220,  236,  221,
      233,  222,  237,  238,  223,  225,  239,  226,  241,  234,
      240,  227,  229,  224,  242,  243,  228,  230,  216,  244,
      231,  232,  247,  235,  236,  245,  233,  246,  237,  248,
      238,  249,  239,  250,  241,  234,  251,  240,  253,  393,
      252,  242,  243,  254,  255,  244,  256,  257,  259,  247,
      258,  245,  260,  246,  261,  248,  262,  249,  263,  250,

      264,  267,  251,  265,  266,  253,  252,  268,  269,  254,
      255,  270,  274,  256,  257,  259,  258,  271,  272,  260,
      273,  261,  262,  275,  263,  276,  277,  264,  267,  265,
      266,  278,  279,  268,  269,  280,  281,  282,  270,  274,
      283,  284,  289,  271,  272,  285,  273,  286,  287,  275,
      288,  290,  276,  277,  291,  292,  293,  278,  279,  294,
      295,  280,  281,  296,  282,  297,  283,  298,  284,  289,
      299,  285,  300,  286,  287,  301,  288,  302,  290,  303,
      304,  291,  292,  293,  305,  294,  306,  295,  307,  308,
      296,  297,  309,  298,  310,  311,  314,  299,  300,  312,

      313,  301,  315,  302,  316,  317,  303,  304,  318,  319,
      320,  305,  306,  321,  322,  307,  308,  323,  309,  324,
      310,  325,  311,  314,  326,  312,  313,  327,  315,  328,
      316,  329,  317,  330,  318,  331,  319,  320,  332,  321,
      333,  322,  334,  335,  323,  336,  324,  325,  337,  338,
      339,  326,  340,  341,  327,  342,  328,  329,  343,  330,
      344,  331,  345,  346,  332,  347,  348,  333,  349,  334,
      335,  350,  336,  351,  337,  352,  338,  339,  353,  340,
      341,  342,  354,  355,  343,  356,  357,  344,  345,  346,
      358,  347,  348,  359,  349,  360,  393,  361,  350,  351,

      362,  363,  352,  364,  353,  365,  366,  368,  354,  355,
      367,  369,  356,  357,  370,  371,  372,  358,  373,  359,
      374,  376,  360,  361,  375,  377,  362,  378,  363,  364,
      379,  380,  365,  366,  368,  381,  367,  382,  369,  383,
      370,  371,  384,  372,  373,  385,  386,  374,  376,  387,
      375,  377,  388,  378,  389,  390,  379,  391,  380,  392,
      393,  381,  393,  382,  393,  383,  393,  393,  393,  384,
      393,  393,  385,  386,  393,  387,  393,  393,  388,  393,
      389,  393,  390,  391,  393,  392,   43,   43,   43,   43,
        8,    8,    8,    8,   58,   58,  115,  115,  115,  115,

      117,  393,  117,  117,  121,  121,    7,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393
    } ;

static yyconst flex_int16_t yy_chk[874] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,   22,    9,   13,
       13,   14,   14,   14,   16,   16,   18,   18,   27,   24,
      396,   27,   28,   24,   16,  120,   46,   22,   46,   24,
       31,  119,   25,   32,   22,   53,   53,   25,   53,   59,

       33,   32,   39,   61,   27,  115,   24,   27,   33,   28,
       24,   16,   21,   22,   21,   24,   39,   31,   25,   21,
       32,   21,   21,   25,   26,   59,   34,   33,   32,   39,
       61,   26,   34,   47,   26,   33,   43,   26,   21,   29,
       21,   63,   39,   36,   29,   21,   36,   21,   21,   23,
       20,   26,   34,   23,   15,    7,   23,   26,   34,   23,
       26,    6,   23,   26,    5,   29,   62,   37,   63,   36,
       29,   50,   36,   40,   64,   40,   23,   37,   40,   23,
       50,   35,   23,   42,   42,   23,   67,   41,   23,   35,
       42,   35,   62,   35,   37,   41,   48,   48,    4,   40,

       64,   40,   60,   37,   40,   70,   48,   50,   35,   51,
       42,   42,   67,   69,   41,   35,   42,   35,   51,   35,
       38,   74,   41,   60,   52,   52,   72,   73,   38,   60,
       38,   70,   38,   48,   52,   80,   38,   66,   75,    3,
       69,   66,    0,   68,   68,   51,   76,   38,   74,   60,
       77,   68,   72,   73,   38,   79,   38,   71,   38,   82,
       71,   52,   38,   83,   66,   75,   71,   80,   66,   68,
       68,   78,   76,   71,   78,   81,   77,   68,   83,   83,
       85,   79,   86,   87,   71,   82,   88,   71,   89,   81,
       83,   90,   71,   80,   91,   91,   94,   78,   95,   71,

       78,   97,   81,   96,   83,   83,   85,   96,   86,   87,
       99,   94,   88,   96,   89,   81,  101,   90,  100,   98,
       91,   91,  102,   94,   98,   95,  100,  103,   97,  104,
       96,  105,  107,  108,   96,  109,   99,   94,  110,   96,
      111,  112,  126,  101,  100,  113,   98,  114,  102,  128,
      129,   98,  100,  103,  118,  104,  130,  135,  105,  107,
      108,  131,  109,  118,  110,  132,  133,  111,  112,  126,
      134,  113,  138,  114,  139,  128,  129,  136,  136,  137,
      140,    0,  137,  130,  135,  141,  142,  131,  143,  145,
      118,  132,  133,  144,  146,  147,  134,  148,  149,  138,

      150,  139,  151,  136,  136,  152,  137,  140,  137,  153,
      154,  141,  155,  142,  156,  143,  145,  157,  159,  144,
      160,  146,  147,  148,  149,  164,  166,  157,  151,  165,
      167,  152,  150,  168,  169,  153,  171,  154,  172,  155,
      170,  156,  173,  174,  157,  159,  175,  160,  178,  170,
      176,  164,  166,  157,  179,  180,  165,  167,  150,  182,
      168,  169,  184,  171,  172,  183,  170,  183,  173,  185,
      174,  186,  175,  187,  178,  170,  188,  176,  189,    0,
      188,  179,  180,  190,  191,  182,  192,  193,  195,  184,
      194,  183,  196,  183,  197,  185,  198,  186,  199,  187,

      200,  203,  188,  201,  202,  189,  188,  204,  205,  190,
      191,  207,  211,  192,  193,  195,  194,  208,  209,  196,
      210,  197,  198,  212,  199,  213,  214,  200,  203,  201,
      202,  216,  218,  204,  205,  219,  220,  221,  207,  211,
      222,  223,  232,  208,  209,  225,  210,  228,  230,  212,
      231,  233,  213,  214,  234,  235,  236,  216,  218,  238,
      239,  219,  220,  240,  221,  241,  222,  243,  223,  232,
      244,  225,  245,  228,  230,  246,  231,  247,  233,  249,
      251,  234,  235,  236,  252,  238,  255,  239,  256,  257,
      240,  241,  260,  243,  261,  263,  266,  244,  245,  264,

      265,  246,  267,  247,  268,  269,  249,  251,  270,  271,
      272,  252,  255,  273,  276,  256,  257,  281,  260,  282,
      261,  283,  263,  266,  284,  264,  265,  285,  267,  286,
      268,  287,  269,  289,  270,  290,  271,  272,  291,  273,
      292,  276,  293,  294,  281,  295,  282,  283,  296,  297,
      298,  284,  301,  302,  285,  303,  286,  287,  304,  289,
      306,  290,  307,  308,  291,  310,  312,  292,  314,  293,
      294,  315,  295,  316,  296,  318,  297,  298,  322,  301,
      302,  303,  324,  326,  304,  327,  328,  306,  307,  308,
      330,  310,  312,  331,  314,  332,    0,  333,  315,  316,

      335,  336,  318,  338,  322,  339,  343,  346,  324,  326,
      344,  347,  327,  328,  352,  354,  356,  330,  358,  331,
      360,  362,  332,  333,  361,  363,  335,  364,  336,  338,
      366,  367,  339,  343,  346,  368,  344,  371,  347,  373,
      352,  354,  374,  356,  358,  375,  376,  360,  362,  380,
      361,  363,  384,  364,  386,  387,  366,  390,  367,  391,
        0,  368,    0,  371,    0,  373,    0,    0,    0,  374,
        0,    0,  375,  376,    0,  380,    0,    0,  384,    0,
      386,    0,  387,  390,    0,  391,  394,  394,  394,  394,
      395,  395,  395,  395,  397,  397,  398,  398,  398,  398,

      399,    0,  399,  399,  400,  400,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int dml_flex_debug;
int dml_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *dmltext;
/* Copyright (C) 2014 InfiniDB, Inc.

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; version 2 of
   the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA. */
/* $Id: dml.l 8707 2012-07-13 19:08:12Z rdempsey $ */
#include <iostream>
#include <vector>
#include <stdio.h>
#include <cstring>
#include "dmlparser.h"

#undef DECIMAL
#undef DELETE
#undef IN
#ifdef _MSC_VER
#include "dml-gram-win.h"
#else
#include "dml-gram.h"
#endif
#ifdef _MSC_VER
#define YY_NO_UNISTD_H
extern "C" int _isatty(int);
#define isatty _isatty
#endif

/* These don't seem to be covered by the prefix option of flex 2.5.4
 * Bison 2.0 puts extern dml_yylval in dml-gram.h. */

/*#define yylval dml_yylval
#define yyerror dml_yyerror*/
using namespace dmlpackage;

void dmlerror(char const *s);

namespace dmlpackage {
int lineno = 1;

/* Handles to the buffer that the lexer uses internally */
static YY_BUFFER_STATE scanbufhandle;
static char *scanbuf;

static char* scanner_copy (char *str);

	/* macro to save the text and return a token */
#define TOK(name) { dmllval.strval = scanner_copy(dmltext); return name; }
}

#define INITIAL 0
#define inquote 1
#define endquote 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int dmllex_destroy (void );

int dmlget_debug (void );

void dmlset_debug (int debug_flag  );

YY_EXTRA_TYPE dmlget_extra (void );

void dmlset_extra (YY_EXTRA_TYPE user_defined  );

FILE *dmlget_in (void );

void dmlset_in  (FILE * in_str  );

FILE *dmlget_out (void );

void dmlset_out  (FILE * out_str  );

int dmlget_leng (void );

char *dmlget_text (void );

int dmlget_lineno (void );

void dmlset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int dmlwrap (void );
#else
extern int dmlwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( dmltext, dmlleng, 1, dmlout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( dmlin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( dmlin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, dmlin))==0 && ferror(dmlin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(dmlin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int dmllex (void);

#define YY_DECL int dmllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after dmltext and dmlleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! dmlin )
			dmlin = stdin;

		if ( ! dmlout )
			dmlout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			dmlensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				dml_create_buffer(dmlin,YY_BUF_SIZE );
		}

		dml_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of dmltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 394 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 807 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
TOK(ALL)
	YY_BREAK
case 2:
YY_RULE_SETUP
TOK(AND)
	YY_BREAK
case 3:
YY_RULE_SETUP
TOK(AMMSC)
	YY_BREAK
case 4:
YY_RULE_SETUP
TOK(AMMSC)
	YY_BREAK
case 5:
YY_RULE_SETUP
TOK(AMMSC)
	YY_BREAK
case 6:
YY_RULE_SETUP
TOK(AMMSC)
	YY_BREAK
case 7:
YY_RULE_SETUP
TOK(AMMSC)
	YY_BREAK
case 8:
YY_RULE_SETUP
TOK(ANY)
	YY_BREAK
case 9:
YY_RULE_SETUP
TOK(AS)
	YY_BREAK
case 10:
YY_RULE_SETUP
TOK(ASC)
	YY_BREAK
case 11:
YY_RULE_SETUP
TOK(AUTHORIZATION)
	YY_BREAK
case 12:
YY_RULE_SETUP
TOK(BETWEEN)
	YY_BREAK
case 13:
YY_RULE_SETUP
TOK(BY)
	YY_BREAK
case 14:
YY_RULE_SETUP
TOK(CHARACTER)
	YY_BREAK
case 15:
YY_RULE_SETUP
TOK(CHECK)
	YY_BREAK
case 16:
YY_RULE_SETUP
TOK(CLOSE)
	YY_BREAK
case 17:
YY_RULE_SETUP
TOK(COMMIT)
	YY_BREAK
case 18:
YY_RULE_SETUP
TOK(CONTINUE)
	YY_BREAK
case 19:
YY_RULE_SETUP
TOK(CREATE)
	YY_BREAK
case 20:
YY_RULE_SETUP
TOK(CURRENT)
	YY_BREAK
case 21:
YY_RULE_SETUP
TOK(CURSOR)
	YY_BREAK
case 22:
YY_RULE_SETUP
TOK(IDB_DECIMAL)
	YY_BREAK
case 23:
YY_RULE_SETUP
TOK(DECLARE)
	YY_BREAK
case 24:
YY_RULE_SETUP
TOK(DEFAULT)
	YY_BREAK
case 25:
YY_RULE_SETUP
TOK(DELETE)
	YY_BREAK
case 26:
YY_RULE_SETUP
TOK(DESC)
	YY_BREAK
case 27:
YY_RULE_SETUP
TOK(ALL)
	YY_BREAK
case 28:
YY_RULE_SETUP
TOK(IDB_DOUBLE)
	YY_BREAK
case 29:
YY_RULE_SETUP
TOK(ESCAPE)
	YY_BREAK
case 30:
YY_RULE_SETUP
TOK(EXISTS)
	YY_BREAK
case 31:
YY_RULE_SETUP
TOK(FETCH)
	YY_BREAK
case 32:
YY_RULE_SETUP
TOK(IDB_FLOAT)
	YY_BREAK
case 33:
YY_RULE_SETUP
TOK(FOR)
	YY_BREAK
case 34:
YY_RULE_SETUP
TOK(FOREIGN)
	YY_BREAK
case 35:
YY_RULE_SETUP
TOK(FOUND)
	YY_BREAK
case 36:
YY_RULE_SETUP
TOK(FROM)
	YY_BREAK
case 37:
YY_RULE_SETUP
TOK(GOTO)
	YY_BREAK
case 38:
YY_RULE_SETUP
TOK(GRANT)
	YY_BREAK
case 39:
YY_RULE_SETUP
TOK(IDB_GROUP)
	YY_BREAK
case 40:
YY_RULE_SETUP
TOK(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
TOK(IN)
	YY_BREAK
case 42:
YY_RULE_SETUP
TOK(INDICATOR)
	YY_BREAK
case 43:
YY_RULE_SETUP
TOK(INSERT)
	YY_BREAK
case 44:
YY_RULE_SETUP
TOK(INTEGER)
	YY_BREAK
case 45:
YY_RULE_SETUP
TOK(INTO)
	YY_BREAK
case 46:
YY_RULE_SETUP
TOK(IS)
	YY_BREAK
case 47:
YY_RULE_SETUP
TOK(KEY)
	YY_BREAK
case 48:
YY_RULE_SETUP
TOK(LANGUAGE)
	YY_BREAK
case 49:
YY_RULE_SETUP
TOK(LIKE)
	YY_BREAK
case 50:
YY_RULE_SETUP
TOK(NOT)
	YY_BREAK
case 51:
YY_RULE_SETUP
TOK(NULLX)
	YY_BREAK
case 52:
YY_RULE_SETUP
TOK(NUMERIC)
	YY_BREAK
case 53:
YY_RULE_SETUP
TOK(OF)
	YY_BREAK
case 54:
YY_RULE_SETUP
TOK(ON)
	YY_BREAK
case 55:
YY_RULE_SETUP
TOK(OPEN)
	YY_BREAK
case 56:
YY_RULE_SETUP
TOK(OPTION)
	YY_BREAK
case 57:
YY_RULE_SETUP
TOK(OR)
	YY_BREAK
case 58:
YY_RULE_SETUP
TOK(ORDER)
	YY_BREAK
case 59:
YY_RULE_SETUP
TOK(PRECISION)
	YY_BREAK
case 60:
YY_RULE_SETUP
TOK(PRIMARY)
	YY_BREAK
case 61:
YY_RULE_SETUP
TOK(PRIVILEGES)
	YY_BREAK
case 62:
YY_RULE_SETUP
TOK(PROCEDURE)
	YY_BREAK
case 63:
YY_RULE_SETUP
TOK(PUBLIC)
	YY_BREAK
case 64:
YY_RULE_SETUP
TOK(REAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
TOK(REFERENCES)
	YY_BREAK
case 66:
YY_RULE_SETUP
TOK(ROLLBACK)
	YY_BREAK
case 67:
YY_RULE_SETUP
TOK(SELECT) 
	YY_BREAK
case 68:
YY_RULE_SETUP
TOK(SET)
	YY_BREAK
case 69:
YY_RULE_SETUP
TOK(SMALLINT)
	YY_BREAK
case 70:
YY_RULE_SETUP
TOK(SOME)
	YY_BREAK
case 71:
YY_RULE_SETUP
TOK(SQLCODE)
	YY_BREAK
case 72:
YY_RULE_SETUP
TOK(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
TOK(TO)
	YY_BREAK
case 74:
YY_RULE_SETUP
TOK(UNION)
	YY_BREAK
case 75:
YY_RULE_SETUP
TOK(UNIQUE)
	YY_BREAK
case 76:
YY_RULE_SETUP
TOK(UPDATE)
	YY_BREAK
case 77:
YY_RULE_SETUP
TOK(USER)
	YY_BREAK
case 78:
YY_RULE_SETUP
TOK(VALUES)
	YY_BREAK
case 79:
YY_RULE_SETUP
TOK(VIEW)
	YY_BREAK
case 80:
YY_RULE_SETUP
TOK(WHENEVER)
	YY_BREAK
case 81:
YY_RULE_SETUP
TOK(WHERE)
	YY_BREAK
case 82:
YY_RULE_SETUP
TOK(WITH)
	YY_BREAK
case 83:
YY_RULE_SETUP
TOK(WORK)
	YY_BREAK
/* punctuation */
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
YY_RULE_SETUP
TOK(COMPARISON)
	YY_BREAK
case 90:
YY_RULE_SETUP
{  TOK(dmltext[0]) }
	YY_BREAK
/* names */
case 91:
YY_RULE_SETUP
{ TOK(NAME) }
	YY_BREAK
/* parameters */
case 92:
YY_RULE_SETUP
{
			return PARAMETER;
		}
	YY_BREAK
/* numbers */
case 93:
case 94:
case 95:
YY_RULE_SETUP
{  TOK(INTNUM) }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ TOK(APPROXNUM) }
	YY_BREAK
case 97:
YY_RULE_SETUP
{BEGIN(inquote);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up dmltext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up dmltext again */
YY_RULE_SETUP
{BEGIN(endquote); TOK(STRING) }
	YY_BREAK
case 99:
YY_RULE_SETUP
{BEGIN(0);}
	YY_BREAK
/* @bug 1870. Since MySQL parser will error out all the unterminated string, we don't actually need it here. */
/* '[^'\n]*$	{	dmlerror("Unterminated string"); } */
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{ lineno++;}
	YY_BREAK
case 101:
YY_RULE_SETUP
;	/* white space */
	YY_BREAK
case 102:
YY_RULE_SETUP
;	/* comment */
	YY_BREAK
case 103:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(inquote):
case YY_STATE_EOF(endquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed dmlin at a new source and called
			 * dmllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = dmlin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( dmlwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * dmltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of dmllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					dmlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			dmlrestart(dmlin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) dmlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 394 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 394 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 393);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					dmlrestart(dmlin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( dmlwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve dmltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void dmlrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        dmlensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            dml_create_buffer(dmlin,YY_BUF_SIZE );
	}

	dml_init_buffer(YY_CURRENT_BUFFER,input_file );
	dml_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void dml_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		dmlpop_buffer_state();
	 *		dmlpush_buffer_state(new_buffer);
     */
	dmlensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	dml_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (dmlwrap()) processing, but the only time this flag
	 * is looked at is after dmlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void dml_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	dmlin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE dml_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) dmlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in dml_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) dmlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in dml_create_buffer()" );

	b->yy_is_our_buffer = 1;

	dml_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with dml_create_buffer()
 * 
 */
    void dml_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		dmlfree((void *) b->yy_ch_buf  );

	dmlfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a dmlrestart() or at EOF.
 */
    static void dml_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	dml_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then dml_init_buffer was _probably_
     * called from dmlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void dml_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		dml_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void dmlpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	dmlensure_buffer_stack();

	/* This block is copied from dml_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from dml_switch_to_buffer. */
	dml_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void dmlpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	dml_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		dml_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void dmlensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)dmlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in dmlensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)dmlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in dmlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE dml_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) dmlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in dml_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	dml_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to dmllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       dml_scan_bytes() instead.
 */
YY_BUFFER_STATE dml_scan_string (yyconst char * yystr )
{
    
	return dml_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to dmllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE dml_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) dmlalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in dml_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = dml_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in dml_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up dmltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		dmltext[dmlleng] = (yy_hold_char); \
		(yy_c_buf_p) = dmltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		dmlleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int dmlget_lineno  (void)
{
        
    return dmllineno;
}

/** Get the input stream.
 * 
 */
FILE *dmlget_in  (void)
{
        return dmlin;
}

/** Get the output stream.
 * 
 */
FILE *dmlget_out  (void)
{
        return dmlout;
}

/** Get the length of the current token.
 * 
 */
int dmlget_leng  (void)
{
        return dmlleng;
}

/** Get the current token.
 * 
 */

char *dmlget_text  (void)
{
        return dmltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void dmlset_lineno (int  line_number )
{
    
    dmllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see dml_switch_to_buffer
 */
void dmlset_in (FILE *  in_str )
{
        dmlin = in_str ;
}

void dmlset_out (FILE *  out_str )
{
        dmlout = out_str ;
}

int dmlget_debug  (void)
{
        return dml_flex_debug;
}

void dmlset_debug (int  bdebug )
{
        dml_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from dmllex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    dmlin = stdin;
    dmlout = stdout;
#else
    dmlin = (FILE *) 0;
    dmlout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * dmllex_init()
     */
    return 0;
}

/* dmllex_destroy is for both reentrant and non-reentrant scanners. */
int dmllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		dml_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		dmlpop_buffer_state();
	}

	/* Destroy the stack itself. */
	dmlfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * dmllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *dmlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *dmlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void dmlfree (void * ptr )
{
	free( (char *) ptr );	/* see dmlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

using namespace dmlpackage;

void dmlerror(char const *s)
{
	printf("yyerror: %d: %s at %s\n", lineno, s, dmltext);
}

namespace dmlpackage {

static valbuf_t valbuf;

valbuf_t get_valbuffer(void)
{
	return valbuf;
}

/*
 * Called before any actual parsing is done
 */
void scanner_init(const char *str)
{
	size_t slen = strlen(str);

	/*
	 * Might be left over after ereport()
	 */
	if (YY_CURRENT_BUFFER)
		dml_delete_buffer(YY_CURRENT_BUFFER);

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
	scanbuf =  (char *)malloc(slen + 2);
	memcpy(scanbuf, str, slen);
	scanbuf[slen] = scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	scanbufhandle = dml_scan_buffer(scanbuf,slen + 2);

	BEGIN(INITIAL);

    valbuf.clear();
}

/*
 * Called after parsing is done to clean up after scanner_init()
 */

void scanner_finish(void)
{
  char* str;

   dml_delete_buffer(scanbufhandle);
   free(scanbuf);
   unsigned int i;
   for(i=0; i<valbuf.size(); i++) {
     str = valbuf[i];
     if(str) {
        //std::cout << "valbuf:(" << str << ")" << std::endl;
        free(valbuf[i]);
     }
   }
   valbuf.clear();
}

char* scanner_copy (char *str)
{
  char* nv = strdup(str);
  if(nv)
    valbuf.push_back(nv);
  return nv;
}

}

